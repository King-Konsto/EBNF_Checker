
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package lexparse;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import tree.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\005\005" +
    "\000\002\005\003\000\002\006\004\000\002\006\003\000" +
    "\002\007\005\000\002\010\005\000\002\011\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\004\016\006\001\002\000\006\002\000\016" +
    "\006\001\002\000\004\002\036\001\002\000\004\004\010" +
    "\001\002\000\006\002\ufffe\016\ufffe\001\002\000\014\006" +
    "\013\011\017\013\015\015\021\016\014\001\002\000\026" +
    "\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\001\002\000\006\005\035" +
    "\010\027\001\002\000\014\006\013\011\017\013\015\015" +
    "\021\016\014\001\002\000\026\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\001\002\000\014\006\013\011\017\013\015\015\021" +
    "\016\014\001\002\000\026\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\001\002\000\014\006\013\011\017\013\015\015\021\016" +
    "\014\001\002\000\026\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\001" +
    "\002\000\026\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\001\002\000" +
    "\026\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\016\ufff3\001\002\000\026\005" +
    "\ufffb\006\013\007\ufffb\010\ufffb\011\017\012\ufffb\013\015" +
    "\014\ufffb\015\021\016\014\001\002\000\026\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\001\002\000\006\010\027\012\026\001" +
    "\002\000\026\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\001\002\000" +
    "\014\006\013\011\017\013\015\015\021\016\014\001\002" +
    "\000\026\005\ufffc\006\013\007\ufffc\010\ufffc\011\017\012" +
    "\ufffc\013\015\014\ufffc\015\021\016\014\001\002\000\006" +
    "\010\027\014\032\001\002\000\026\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\001\002\000\006\007\034\010\027\001\002\000" +
    "\026\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\001\002\000\006\002" +
    "\ufffd\016\ufffd\001\002\000\004\002\001\001\002\000\006" +
    "\002\uffff\016\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\010\002\004\003\003\004\006\001\001\000" +
    "\004\004\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\011\006\022\007\021\010" +
    "\015\011\010\012\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\032\006\022\007\021\010\015\011" +
    "\010\012\017\001\001\000\002\001\001\000\016\005\030" +
    "\006\022\007\021\010\015\011\010\012\017\001\001\000" +
    "\002\001\001\000\016\005\024\006\022\007\021\010\015" +
    "\011\010\012\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\021\010\015\011\010" +
    "\012\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\027\007\021\010\015\011\010" +
    "\012\017\001\001\000\012\007\021\010\015\011\010\012" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private HashMap<String, BinaryTree> treeMap = new HashMap<String, BinaryTree>(); //Syntaxb√§ume der korrekt geparsten Regeln
    private String parserAusgabe = ""; //Fehlerausgabe des Parsers
    private boolean syntaxError = false; //Anzeigen, dass ein SyntaxFehler aufgetreten ist
    private ComplexSymbolFactory.ComplexSymbol aktuelleRegel;

    public Parser(Scanner lex, ComplexSymbolFactory sf) {
        super(lex,sf);
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

    //Fehlerbehandlung mit Zeilen- und Spaltenausgabe
    @Override
    public void report_error(String message, Object info) {
        syntaxError = true;
        String m = "Error";
        if (info instanceof ComplexSymbolFactory.ComplexSymbol) {
            ComplexSymbolFactory.ComplexSymbol s = ((ComplexSymbolFactory.ComplexSymbol) info);               
            m += " for input symbol " + s.getName() + " in line " + s.xleft.getLine() + ", column " + s.xright.getColumn() + ": " + message;
        } else {
            m += ": " + message;
        }
        ausgabe(m);
    }

    //Anzeige der erwarteten Symbole nach Fehler (nicht kompatibel mit GWT 2.5)
    /*@Override
    protected void report_expected_token_ids(){
        List<Integer> ids = expected_token_ids();
	LinkedList<String> list = new LinkedList<String>();
	for (Integer expected : ids){
            list.add(symbl_name_from_id(expected));
	}
	//System.out.println("instead expected token classes are "+list);
        ausgabe("instead expected token classes are "+list);
    }*/

    private void ausgabe(String s) {
        if(parserAusgabe.equals("")) {
            parserAusgabe = s;
        } else if(!s.equals("")) {
            parserAusgabe = parserAusgabe + "\n" + s;
        }
    }

    public String getParserAusgabe() {
        String s = parserAusgabe;
        parserAusgabe = "";
        return s;
    }
    
    public boolean isSyntaxError() {
        return syntaxError;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,BinaryTree> start_val = (HashMap<String,BinaryTree>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= syntax 
            {
              HashMap<String,BinaryTree> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                //Als R√ºckgabewert beim Parsen, erh√§lt man eine HashMap mit den Syntaxb√§umen aller Regeln
                RESULT = treeMap;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // syntax ::= syntax production 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                BinaryTree tree = new BinaryTree(p);
                //Optimierungen am Syntaxbaum
                tree.optimiereAlternative(tree.getRoot());
                tree.optimiereReihe(tree.getRoot());
                tree.entferneKlammern(tree.getRoot(), treeMap);
                tree.ersetzeMittigeRekursion(tree.getRoot());
                tree.optimiereAlternative(tree.getRoot());
                tree.optimiereReihe(tree.getRoot());
                if(treeMap.containsKey(tree.getRoot().getValue())) {
                    //Regel schon vorhanden => Fehler
                    report_error("This rule is already defined", aktuelleRegel);
                } else {
                    //Regel noch nicht vorhanden => Hinzuf√ºgen
                    treeMap.put(tree.getRoot().getValue(), tree);
                }
                if(tree.erkenneLinksRekursion(tree.getRoot())){
                    report_error("This rule is left-recursive (interpreting not supported)",aktuelleRegel);
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("syntax",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // syntax ::= production 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                BinaryTree tree = new BinaryTree(p);
                //Optimierungen am Syntaxbaum
                tree.optimiereAlternative(tree.getRoot());
                tree.optimiereReihe(tree.getRoot());
                tree.entferneKlammern(tree.getRoot(), treeMap);
                tree.ersetzeMittigeRekursion(tree.getRoot());
                tree.optimiereAlternative(tree.getRoot());
                tree.optimiereReihe(tree.getRoot());
                if(treeMap.containsKey(tree.getRoot().getValue())) {
                    //Regel schon vorhanden => Fehler
                    report_error("This rule is already defined", aktuelleRegel);
                } else {
                    //Regel noch nicht vorhanden => Hinzuf√ºgen
                    treeMap.put(tree.getRoot().getValue(), tree);
                }
                if(tree.erkenneLinksRekursion(tree.getRoot())){
                    report_error("This rule is left-recursive (interpreting not supported)",aktuelleRegel);
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("syntax",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // production ::= NICHTTERMINAL ZUWEISUNG alternative ENDE 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    aktuelleRegel = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                    Node temp = new Node(Type.P, n, null, a, null);
                    Node end = new Node(Type.E, null, temp, null, null);
                    temp.setRight(end);
                    a.setTop(temp);
                    RESULT = temp;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("production",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // alternative ::= alternative ODER reihe 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    Node temp = new Node(Type.ALTERNATIVE, null, null, r, null);
                    r.setTop(temp);
                    //bei letztem Knoten rechts einfuegen
                    Node zeiger = a;
                    while(zeiger.getRight() != null) {
                        zeiger = zeiger.getRight();
                    }
                    zeiger.setRight(temp);
                    temp.setTop(zeiger);
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alternative",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // alternative ::= reihe 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Node temp = new Node(Type.ALTERNATIVE, null, null, r, null);
                    r.setTop(temp);
                    RESULT = temp;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alternative",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // reihe ::= reihe factor 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node temp = new Node(Type.REIHE, null, null, f, null);
                f.setTop(temp);
                //bei letztem Knoten rechts einfuegen
                Node zeiger = r;
                while(zeiger.getRight() != null) {
                    zeiger = zeiger.getRight();
                }
                zeiger.setRight(temp);
                temp.setTop(zeiger);
                RESULT = r;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reihe",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // reihe ::= factor 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node temp = new Node(Type.REIHE, null, null, f, null);
                f.setTop(temp);
                RESULT = temp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reihe",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // klammer ::= KLAMMER_AUF alternative KLAMMER_ZU 
            {
              Node RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node temp = new Node(Type.KLAMMER, null, null, a, null);
                a.setTop(temp);
                RESULT = temp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("klammer",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // option ::= OPTION_AUF alternative OPTION_ZU 
            {
              Node RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node temp = new Node(Type.OPTION, null, null, a, null);
                a.setTop(temp);
                RESULT = temp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("option",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // wiederholung ::= WDH_AUF alternative WDH_ZU 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Node temp = new Node(Type.WDH, null, null, a, null);
                        a.setTop(temp);
                        RESULT = temp;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("wiederholung",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // factor ::= NICHTTERMINAL 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Node(Type.NT, n, null, null, null);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // factor ::= TERMINAL 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Node(Type.T, t, null, null, null);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // factor ::= klammer 
            {
              Node RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node k = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = k;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // factor ::= option 
            {
              Node RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node o = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = o;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // factor ::= wiederholung 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = w;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
